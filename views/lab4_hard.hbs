<div class="bloc l-bloc" id="bloc-15">
    <div class="container bloc-lg">
        <div class="row">
            <div class="col">
                <div class="row">
                    <div class="col">
                        <h3 class="mb-4 section-heading primary-text">
                            Слежение с преследованием
                        </h3>

                        {{#if preset.show_stats}}
                        <div class="row justify-content-center">
                            <div id="stats" class="card col-4">
                                <div class="text-lg-center card-body">
                                    <h5 class="card-title">Статистика</h5>
                                    <p id="clicks" class="card-text">Кликов: 0</p>
                                    <p id="misses" class="card-text">Промахов: 0</p>
                                    <p id="hitPercent" class="card-text">Процент попаданий: 0%</p>
                                    <p id="meanReactionTime" class="card-text">Среднее время реакции: 0</p>
                                    <p id="stdDevReactionTime" class="card-text">Стандартное отклонение реакции: 0</p>
                                </div>
                            </div>
                        </div>
                        {{/if}}

                        <div class="row justify-content-center align-items-center">
                            <div class="col-12 d-flex justify-content-center align-items-center mb-3">
                                <div id="buttonContainer">
                                    <button id="startButton" class="btn btn-primary">Начать тест</button>
                                </div>
                            </div>
                            <div class="col-12 d-flex justify-content-center align-items-center">
                                <canvas id="testCanvas" width="1070" height="600"></canvas>
                            </div>
                        </div>
                        <a href="../" class="btn btn-d box-btn fill-mob-btn primary-btn mt-lg-5 float-lg-end btn-rd btn-lg">Назад</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    (() => {
        const canvas = document.getElementById('testCanvas');
        const ctx = canvas.getContext('2d');

        let testRunning = false;
        const presetTime = {{ preset.runtime }};
        const acceleration = {{ preset.acceleration_koef }} * .3;
        const initialSpeed = {{ preset.speed_koef }} * 2;

        let attempts = 0;
        let hits = 0;

        const rectWidth = 50;
        const rectHeight = 50;
        const circleRadius = 25;
        let circleX = canvas.width / 2 - circleRadius;
        let circleY = canvas.height / 2 - circleRadius;
        let rectX = circleX;
        let rectY = circleY;
        let speed = initialSpeed;
        let userDirection = 1;
        const maxspeed = 10;
        const directionChangeProbability = 0.05;

        let targetHp = 100;

        const reactionTimes = [];
        let lastReactionTime = null;

        const startButton = document.getElementById('startButton');
        const buttonContainer = document.getElementById('buttonContainer');

        const drawShapes = () => {
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            ctx.beginPath();
            ctx.rect(rectX, rectY, rectWidth, rectHeight);
            ctx.fillStyle = 'red';
            ctx.fill();
            ctx.closePath();

            ctx.beginPath();
            ctx.arc(circleX + circleRadius, circleY + circleRadius, circleRadius, 0, Math.PI * 2, false);
            ctx.fillStyle = 'green';
            ctx.fill();
            ctx.closePath();
        };

        const checkCollision = () => {
            if (Math.abs(rectX - circleX) < rectWidth) {
                hits++;
                targetHp -= 1;

                if (targetHp <= 0) {
                    targetHp = 100;

                    speed += acceleration;
                    speed = Math.min(speed, maxspeed)
                }
            }
        };

        const updateStats = () => {
            const hitPercent = (hits / attempts) * 100;
            const meanReactionTime = reactionTimes.reduce((a, b) => a + b, 0) / reactionTimes.length;
            const stdDevReactionTime = Math.sqrt(reactionTimes.map(x => Math.pow(x - meanReactionTime, 2)).reduce((a, b) => a + b, 0) / reactionTimes.length);

            document.getElementById('clicks').textContent = `Попаданий: ${hits}`;
            document.getElementById('misses').textContent = `Промахов: ${attempts - hits}`;
            document.getElementById('hitPercent').textContent = `Процент попаданий: ${hitPercent.toFixed(2)}%`;
            document.getElementById('meanReactionTime').textContent = `Среднее время реакции: ${meanReactionTime.toFixed(2)} ms`;
            document.getElementById('stdDevReactionTime').textContent = `Стандартное отклонение времени реакции: ${stdDevReactionTime.toFixed(2)} ms`;
        };


        const startTest = () => {
            if (testRunning) return;
            testRunning = true;
            buttonContainer.classList.add('hidden');
            let startTime = Date.now();

            let testInterval = setInterval(() => {
                if (!testRunning) {
                    clearInterval(testInterval);
                    return;
                }

                if (Math.random() < directionChangeProbability && Math.abs(rectX - circleX) < rectWidth) {
                    userDirection = -userDirection;
                }

                circleX += speed * userDirection;
                attempts++;

                drawShapes();
                checkCollision();
                updateStats();

                if (Date.now() - startTime >= presetTime * 1000) {
                    testRunning = false;
                    postResults();
                    clearInterval(testInterval);
                }
            }, 10);
        };

        startButton.addEventListener('click', startTest);

        window.addEventListener('keydown', (event) => {
            if (event.code == 'ArrowRight') {
                userDirection = 1;
            } else if (event.code == 'ArrowLeft') {
                userDirection = -1;
            }

            if (lastReactionTime !== null) {
                const reactionTime = Date.now() - lastReactionTime;
                reactionTimes.push(reactionTime);
            }
            lastReactionTime = Date.now();
        });

        const postResults = () => {
            const hitPercent = (hits / attempts) * 100;
            const results = {
                hits: hits,
                misses: attempts - hits,
                hitPercent: hitPercent.toFixed(2),
                test_id: 2,
                preset_id: {{preset_id}}
            };

            fetch('../', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(results)
            }).then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    throw new Error('Error: ' + response.statusText);
                }
            }).then(data => {
                console.log(data);
            }).catch(error => console.error('Error:', error));
        };
    })();
</script>
