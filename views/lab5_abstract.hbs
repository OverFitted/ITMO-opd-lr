<div class="bloc l-bloc" id="bloc-15">
    <div class="container bloc-lg">
        <div class="row">
            <div class="col">
                <div class="row">
                    <div class="col">
                        <h3 class="mb-4 section-heading primary-text">
                            Тест на абстрактное мышление
                        </h3>

                        {{#if preset.show_stats}}
                            <div class="row justify-content-center">
                                <div id="stats" class="card col-4">
                                    <div class="text-lg-center card-body">
                                        <h5 class="card-title">Статистика</h5>
                                        <p id="clicks" class="card-text">Кликов: 0</p>
                                        <p id="misses" class="card-text">Промахов: 0</p>
                                        <p id="avgTime" class="card-text">Среднее время реакции: 0</p>
                                        <p id="stdDev" class="card-text">Стандартное отклонение: 0</p>
                                    </div>
                                </div>
                            </div>
                        {{/if}}

                        <div class="row justify-content-center align-items-center">
                            <div class="col-12 d-flex justify-content-center align-items-center mb-3">
                                <div id="buttonContainer">
                                    <button id="startButton" class="btn btn-primary">Начать тест</button>
                                </div>
                            </div>
                            <div class="col-12 d-flex justify-content-center align-items-center">
                                <canvas id="testCanvas" width="1070" height="600"></canvas>
                            </div>
                        </div>

                        <div class="row justify-content-center align-items-center">
                            <div class="col-12 d-flex justify-content-center align-items-center mb-3">
                                <div id="targetDisplay" class="text-center"></div>
                            </div>
                        </div>

                        <a href="../" class="btn btn-d box-btn fill-mob-btn primary-btn mt-lg-5 float-lg-end btn-rd btn-lg">Назад</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    const canvas = document.getElementById('testCanvas');
    const ctx = canvas.getContext('2d');

    const padding = 30;
    const maxHeight = (canvas.height - 3 * padding) / 2;

    let questionIndex = 0;
    const allQuestions = [
        "Атмосферный окурок",
        "Ваза с видом изо рта",
        "Ёжик под наркозом",
        "Мост через ночь",
        "Шарикоподшипник с кубическими шариками",
        "Горстка вечных конфет",
        "Таблетки от безденежья",
        "Интеллектуальное ведро",
        "Яма вверх дном",
        "Туземцы говорят, что на черный день красного вина не напасёшься",
    ];

    const correctAnswers = {
        "Атмосферный окурок": "метеорит",
        "Ваза с видом изо рта": "труба в оркестре",
        "Ёжик под наркозом": "кактус",
        "Мост через ночь": "кровать",
        "Шарикоподшипник с кубическими шариками": "коллектив из несовместимых людей",
        "Горстка вечных конфет": "зубы",
        "Таблетки от безденежья": "монеты",
        "Интеллектуальное ведро": "каска",
        "Яма вверх дном": "парашют",
        "Туземцы говорят, что на черный день красного вина не напасёшься": "пессимизм",
    };

    const allAnswers = ["пессемизм", "зубы", "кровать", "коллектив из несовместимых людей", "монеты", "кактус",
        "метеорит", "труба в оркестре", "парашют", "каска"];

    let questions = []
    let answers = []

    let answerMapping = {
        "A1.jpg": 2,
        "A2.jpg": 1,
        "A3.jpg": 0,
        "A4.jpg": 0,
        "A5.jpg": 2,
        "A6.jpg": 1,
        "A7.jpg": 2,
        "A8.jpg": 1,
        "A9.jpg": 2,
        "A10.jpg": 0,
    };

    const levels = [
        { difficulty: "easy", num_pictures: 2, num_questions: 2 },
        { difficulty: "medium", num_pictures: 4, num_questions: 4 },
        { difficulty: "hard", num_pictures: 6, num_questions: 6 }
    ];
    const levelCount = {{ preset.num_levels }}
    const levelDistribution = "{{preset.level_distribution}}"  // random or fair (easy -> medium -> hard)
    let currentLevel = 0;

    const shownImages = {
        count: 0,
        max: 2,
        increment: function () { this.count++; },
        reset: function () { this.count = 0; },
    };

    const testData = {
        totalClicks: 0,
        misses: 0,
        reactionTimes: [],
        startTime: null,
    };

    document.getElementById('startButton').addEventListener('click', nextLevel);

    function nextLevel() {
        if (currentLevel < levels.length) {
            shownImages.max = levels[currentLevel].num_pictures;
            questionIndex = 0;
            questions = allQuestions.slice(0, levels[currentLevel].num_questions);
            answers = questions.map(q => correctAnswers[q]);
            shuffleQuestions();
            shuffleImages();
            nextImage();
        } else {
            console.log("Test over, all levels completed!");
        }
    }

    function shuffleQuestions() {
        // Fisher-Yates shuffle algorithm to rearrange questions and answers
        for (let i = questions.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [questions[i], questions[j]] = [questions[j], questions[i]];
            [answers[i], answers[j]] = [answers[j], answers[i]];
        }
    }

    function shuffleImages() {
        // Fisher-Yates shuffle algorithm to rearrange images and answerMapping
        const keys = Object.keys(answerMapping);
        for (let i = keys.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [keys[i], keys[j]] = [keys[j], keys[i]];
            [answerMapping[keys[i]], answerMapping[keys[j]]] = [answerMapping[keys[j]], answerMapping[keys[i]]];
        }
    }

    function nextImage() {
        if (shownImages.count < shownImages.max) {
            shownImages.increment();
            testData.startTime = Date.now();
            const imageNum = Math.ceil(Math.random() * 10);
            const imageKey = `A${imageNum}.jpg`;
            const answerKey = `A${imageNum}-ans.jpg`;
            startImageTest(imageKey, answerKey, answerMapping[imageKey]);
        } else {
            shownImages.reset();
            startTextTest();
        }
    }

    function setupImages(imageKey, answerKey) {
        ctx.clearRect(0, 0, canvas.width, canvas.height);

        const loadImage = (imgKey, yOffset) => {
            const img = new Image();
            img.onload = function () {
                const aspectRatio = img.width / img.height;
                let newHeight = Math.min(maxHeight, img.height);
                let newWidth = newHeight * aspectRatio;
                const xStart = (canvas.width - newWidth) / 2;
                ctx.drawImage(img, xStart, yOffset, newWidth, newHeight);
            };
            img.src = `/img/deduction/${imgKey}`;
            return img;
        };

        const mainImg = loadImage(imageKey, padding);
        const ansImg = loadImage(answerKey, 2 * padding + maxHeight);
    }

    function setupOnClickEvent(correctPart) {
        canvas.onclick = function (event) {
            const rect = canvas.getBoundingClientRect();
            const x = event.clientX - rect.left;
            const y = event.clientY - rect.top;

            testData.totalClicks++;

            if (y < 2 * padding + maxHeight) {
                return;  // Clicked on the main image
            }

            if (x >= correctPart * canvas.width / 3 && x < (correctPart + 1) * canvas.width / 3) {
                testData.reactionTimes.push(Date.now() - testData.startTime);
            } else {
                testData.misses++;
            }

            updateStats();
            if (shownImages.count < shownImages.max) {
                nextImage();
            } else if (questionIndex < questions.length) {
                startTextTest();
            } else {
                currentLevel++;
                nextLevel();
            }
        };
    }

    function startImageTest(imageKey, answerKey, correctPart) {
        setupImages(imageKey, answerKey);
        setupOnClickEvent(correctPart);
    }

    function startTextTest() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        ctx.textAlign = "center";
        ctx.textBaseline = "middle";

        if (questionIndex < questions.length) {
            testData.startTime = Date.now();
            const question = questions[questionIndex];

            ctx.font = '24px Arial';
            ctx.fillText(question, canvas.width / 2, canvas.height / 4);

            ctx.font = '20px Arial';
            for (let i = 0; i < answers.length; i++) {
                ctx.fillText(answers[i], canvas.width / 2, canvas.height / 2 + i * 30);
            }

            canvas.onclick = function (event) {
                const rect = canvas.getBoundingClientRect();
                const y = event.clientY - rect.top;

                const lineHeight = parseInt(ctx.font, 10);
                const answerHeight = lineHeight + 10;

                if (y > canvas.height / 2 && y < (canvas.height / 2 + answers.length * answerHeight)) {
                    const answerIndex = Math.floor((y - canvas.height / 2) / answerHeight);
                    if (answerIndex < answers.length) {
                        testData.totalClicks++;
                        if (answers[answerIndex] === correctAnswers[questions[questionIndex]]) {
                            testData.reactionTimes.push(Date.now() - testData.startTime);
                        } else {
                            testData.misses++;
                        }
                    }
                }

                questionIndex++;
                if (questionIndex < questions.length) {
                    startTextTest();
                } else {
                    currentLevel++;
                    nextLevel();
                }
                updateStats();
            };
        } else {
            ctx.font = '24px Arial';
            ctx.fillText('Test Complete', canvas.width / 2, canvas.height / 2);
        }
    }

    function updateStats() {
        {{#if preset.show_stats}}
            document.getElementById('clicks').textContent = `Кликов: ${testData.totalClicks}`;
            document.getElementById('misses').textContent = `Промахов: ${testData.misses}`;

            const avgTime = testData.reactionTimes.reduce((a, b) => a + b, 0) / testData.reactionTimes.length || 0;
            document.getElementById('avgTime').textContent = `Среднее время реакции: ${avgTime.toFixed(2)}`;

            const timeValues = testData.reactionTimes.map(t => (t - avgTime) ** 2);
            const stdDev = Math.sqrt(timeValues.reduce((a, b) => a + b, 0) / timeValues.length) || 0;
            document.getElementById('stdDev').textContent = `Стандартное отклонение: ${stdDev.toFixed(2)}`;
        {{/if}}
    }

    function postResults() {
        let avgTime = reactionTimes.reduce((a, b) => a + b, 0) / reactionTimes.length;
        let sd = Math.sqrt(reactionTimes.map(time => Math.pow(time - avgTime, 2)).reduce((a, b) => a + b, 0) / (reactionTimes.length - 1));

        let results = {
            avgTime: avgTime.toFixed(2),
            stdDev: sd.toFixed(2),
            test_id: 1,
            preset_id: {{preset_id}}
        };

        fetch('../', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(results)
        }).then(response => {
            if (response.ok) {
                return response.json();
            } else {
                throw new Error('Error: ' + response.statusText);
            }
        }).then(data => {
            console.log(data);
        }).catch(error => console.error('Error:', error));
    }
</script>