<div class="bloc l-bloc" id="bloc-15">
    <div class="container bloc-lg">
        <div class="row">
            <div class="col">
                <div class="row">
                    <div class="col">
                        <h3 class="mb-4 section-heading primary-text">
                            Тест звуковой памяти
                        </h3>

                        {{#if preset.show_stats}}
                            <div class="row justify-content-center">
                                <div id="stats" class="card col-4">
                                    <div class="text-lg-center card-body">
                                        <h5 class="card-title">Статистика</h5>
                                        <p id="clicks" class="card-text">Ответов: 0</p>
                                        <p id="misses" class="card-text">Неправильных: 0</p>
                                        <p id="avg" class="card-text">Средний процент правильных ответов: 0</p>
                                        <p id="stdDev" class="card-text">Стандартное отклонение: 0</p>
                                    </div>
                                </div>
                            </div>
                        {{/if}}

                        <br>

                        <div class="row justify-content-center align-items-center">
                            <div class="col-12 d-flex justify-content-center align-items-center mb-3">
                                <div id="buttonContainer">
                                    <button class="btn btn-primary" onclick="startTest('fair')">
                                        Начать тест
                                    </button>
                                </div>
                            </div>
                            <div class="col col-12 d-flex flex-column justify-content-center align-items-center">
                                <div class="row justify-content-center">
                                    <div id="inputContainer"></div>
                                </div>
                                <div class="row justify-content-center">
                                    <button id="nextButton" class="btn btn-primary" onclick="checkAnswers()" hidden>
                                        Далее
                                    </button>
                                    <p id="resultMessage"></p>
                                </div>
                            </div>
                        </div>

                        <div class="row justify-content-center align-items-center">
                            <div class="col-12 d-flex justify-content-center align-items-center mb-3">
                                <div id="targetDisplay" class="text-center"></div>
                            </div>
                        </div>

                        <a href="../" class="btn btn-d box-btn fill-mob-btn primary-btn mt-lg-5 float-lg-end btn-rd btn-lg">Назад</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    const pool = [
        "журналист", "бой", "стекло", "основа",
        "публика", "кровать", "гора", "церковь",
        "отрасль", "инженер", "сила", "поворот",
        "человечество", "запас", "страх", "дочка",
        "огонь", "оплата", "комитет", "модель",
        "вещь", "период", "специалист", "имущество",
        "рождение", "капитал", "право", "память",
        "номер", "день", "статус", "причина",
        "обстановка", "лагерь", "мальчик", "взгляд",
        "знак", "соглашение", "передача", "величина",
        "билет", "сотрудник", "врач", "солнце",
        "рабочий", "полковник", "поверхность", "дурак",
        "учитель", "этап", "необходимость", "продукция",
        "машина", "штука", "путь", "статус",
        "растение", "природа", "человек", "друг",
        "чай", "капитан", "бабушка", "комиссия",
        "комната", "чтение", "сделка", "заказ",
        "артист", "субъект", "число", "объединение",
        "писатель", "чувство", "масштаб", "лицо",
        "вид", "большинство", "реформа", "отдых",
        "разработка", "палец", "изображение", "рождение",
        "двигатель", "окно", "сфера", "заместитель",
        "пол", "болезнь", "рассказ", "мысль",
        "день", "цифра", "губа", "наличие", "экран"
    ];

    const levelWords = {
        fair: [5, 10, 20],
        random: [5, 10, 20]
    };

    let currentLevel = 0;
    let currentWords = [];
    let correctAnswers = 0;
    let selectedMode = "{{preset.level_distribution}}";

    let totalCorrectAnswers = 0;
    let totalTests = 0;
    let testsResults = [];

    function startTest() {
        document.getElementById("inputContainer").innerHTML = "";
        document.getElementById("resultMessage").textContent = "";
        currentLevel = 0;
        correctAnswers = 0;
        generateWords();
        speakWords();
    }

    function generateWords() {
        const level = selectedMode === "fair" ? currentLevel : getRandomInt(0, levelWords[selectedMode].length - 1);
        const wordCount = levelWords[selectedMode][level];
        currentWords = getRandomWords(wordCount);
    }

    function getRandomWords(count) {
        const wordsCopy = [...pool];
        const words = [];
        for (let i = 0; i < count; i++) {
            const randomIndex = getRandomInt(0, wordsCopy.length - 1);
            words.push(wordsCopy.splice(randomIndex, 1)[0]);
        }
        return words;
    }

    function getRandomInt(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }

    function speakWords() {
        let index = 0;
        const interval = setInterval(function () {
            const word = currentWords[index];
            speakWord(word);
            index++;
            if (index >= currentWords.length) {
                clearInterval(interval);
                showAnswerFields();
            }
        }, 1500);
    }

    function speakWord(word) {
        const utterance = new SpeechSynthesisUtterance(word);
        utterance.lang = "ru-RU";
        speechSynthesis.speak(utterance);
    }

    function showAnswerFields() {
        const inputContainer = document.getElementById("inputContainer");
        inputContainer.innerHTML = "";

        const wordCount = currentWords.length;
        for (let i = 0; i < wordCount; i++) {
            const input = document.createElement("input");
            input.type = "text";
            inputContainer.appendChild(input);
        }

        $("#nextButton").removeAttr('hidden');
    }

    function calculateStdDev(arr) {
        const n = arr.length;
        const mean = arr.reduce((a, b) => a + b) / n;
        return Math.sqrt(arr.map(x => Math.pow(x - mean, 2)).reduce((a, b) => a + b) / n);
    }

    function checkAnswers() {
        const inputContainer = document.getElementById("inputContainer");
        const inputs = inputContainer.getElementsByTagName("input");
        const wordCount = currentWords.length;
        const userAnswers = [];
        let correctCount = 0;

        for (let i = 0; i < wordCount; i++) {
            const input = inputs[i];
            const userAnswer = input.value.trim().toLowerCase();
            userAnswers.push(userAnswer);
        }

        for (let i = 0; i < wordCount; i++) {
            const correctWord = currentWords[i].toLowerCase();

            if (userAnswers.includes(correctWord)) {
                correctCount++;
            }
        }

        correctAnswers += correctCount;

        const percentage = (correctCount / wordCount) * 100;
        testsResults.push(percentage);
        totalCorrectAnswers += correctCount;
        totalTests += wordCount;

        if (currentLevel === 2) {
            const totalMessage = `Вы ответили правильно на ${correctAnswers} из ${levelWords[selectedMode].reduce((a, b) => a + b, 0)} слов.`;
            document.getElementById("resultMessage").textContent = totalMessage;

            const globalMean = totalCorrectAnswers / totalTests * 100;  // Calculate mean
            document.getElementById("avg").textContent = "Средний процент правильных ответов: " + globalMean.toFixed(2);

            const globalStdDev = calculateStdDev(testsResults);  // Calculate standard deviation
            document.getElementById("stdDev").textContent = "Стандартное отклонение: " + globalStdDev.toFixed(2);

            document.getElementById("nextButton").disabled = true;
            postResults();
            alert("Test over")
        } else {
            currentLevel++;
            generateWords();
            speakWords();
            updateStats();
        }
    }

    function updateStats() {
        document.getElementById("clicks").textContent = "Ответов: " + totalCorrectAnswers;
        document.getElementById("misses").textContent = "Неправильных: " + (levelWords[selectedMode].reduce((a, b) => a + b, 0) - totalCorrectAnswers);

        const globalMean = totalCorrectAnswers / totalTests * 100;  // Calculate mean
        document.getElementById("avg").textContent = "Средний процент правильных ответов: " + globalMean.toFixed(2);

        const globalStdDev = calculateStdDev(testsResults);  // Calculate standard deviation
        document.getElementById("stdDev").textContent = "Стандартное отклонение: " + globalStdDev.toFixed(2);
    }

    function postResults() {
        const globalMean = totalCorrectAnswers / totalTests * 100;
        const globalStdDev = calculateStdDev(testsResults);

        let results = {
            avgTime: globalMean.toFixed(2),
            stdDev: globalStdDev.toFixed(2),
            test_id: 4,
            preset_id: {{preset_id}}
        };
        fetch('../', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(results)
        }).then(response => {
            if (response.ok) {
                return response.json();
            } else {
                throw new Error('Error: ' + response.statusText);
            }
        }).then(data => {
            console.log(data);
        }).catch(error => console.error('Error:', error));
    }
</script>