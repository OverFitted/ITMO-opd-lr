<div class="bloc l-bloc" id="bloc-15">
    <div class="container bloc-lg">
        <div class="row">
            <div class="col">
                <div class="row">
                    <div class="col">
                        <h3 class="mb-4 section-heading primary-text">
                            Тест на аналитическое мышление
                        </h3>

                        {{#if preset.show_stats}}
                            <div class="row justify-content-center">
                                <div id="stats" class="card col-4">
                                    <div class="text-lg-center card-body">
                                        <h5 class="card-title">Статистика</h5>
                                        <p id="clicks" class="card-text">Кликов: 0</p>
                                        <p id="misses" class="card-text">Промахов: 0</p>
                                        <p id="avgTime" class="card-text">Среднее время реакции: 0</p>
                                        <p id="stdDev" class="card-text">Стандартное отклонение: 0</p>
                                    </div>
                                </div>
                            </div>
                        {{/if}}

                        <div class="row justify-content-center align-items-center">
                            <div class="col-12 d-flex justify-content-center align-items-center mb-3">
                                <div id="buttonContainer">
                                    <button id="startButton" class="btn btn-primary">Начать тест</button>
                                </div>
                            </div>
                            <div class="col-12 d-flex justify-content-center align-items-center">
                                <canvas id="testCanvas" width="1070" height="600"></canvas>
                            </div>
                        </div>

                        <div class="row justify-content-center align-items-center">
                            <div class="col-12 d-flex justify-content-center align-items-center mb-3">
                                <div id="targetDisplay" class="text-center"></div>
                            </div>
                        </div>

                        <a href="../" class="btn btn-d box-btn fill-mob-btn primary-btn mt-lg-5 float-lg-end btn-rd btn-lg">Назад</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    const correctAnswers = JSON.parse('{{{raven_answers}}}');

    const startButton = document.getElementById("startButton");
    const testCanvas = document.getElementById("testCanvas");
    const ctx = testCanvas.getContext("2d");

    const levelCount = {{ preset.num_levels }}
    const levelDistribution = "{{preset.level_distribution}}"  // random or fair (easy -> medium -> hard)

    let level = 0;
    let difficulty_prefixes = { "easy": "A", "medium": "B", "hard": "C" };

    let reactionTimes = [];

    let totalClicks = 0;
    let totalMisses = 0;
    let clickTimes = [];
    let imageCount = Object.keys(correctAnswers).length;

    const imagesByLevel = {
        "easy": [],
        "medium": [],
        "hard": []
    };

    Object.keys(correctAnswers).forEach(key => {
        if (key.startsWith("A")) {
            imagesByLevel.easy.push(key);
        } else if (key.startsWith("B")) {
            imagesByLevel.medium.push(key);
        } else if (key.startsWith("C")) {
            imagesByLevel.hard.push(key);
        }
    });

    let currentLevelImages = [];
    let currentImageIndex = 0;
    let currentLevel = "easy";

    function updateLevel() {
        level++;

        if (level === 1) {
            currentLevel = "easy";
            currentLevelImages = imagesByLevel.easy;
        } else if (level === 2) {
            currentLevel = "medium";
            currentLevelImages = imagesByLevel.medium;
        } else {
            currentLevel = "hard";
            currentLevelImages = imagesByLevel.hard;
        }

        currentImageIndex = 0;
    }

    function drawImage(imagePath) {
        let image = new Image();
        image.src = imagePath;
        image.onload = function () {
            ctx.clearRect(0, 0, testCanvas.width, testCanvas.height);

            let targetWidth, targetHeight;
            if (image.width > image.height) {
                targetWidth = testCanvas.width;
                targetHeight = image.height * (testCanvas.width / image.width);
            } else {
                targetHeight = testCanvas.height;
                targetWidth = image.width * (testCanvas.height / image.height);
            }

            let x = (testCanvas.width - targetWidth) / 2;
            let y = (testCanvas.height - targetHeight) / 2;

            testCanvas.imageX = x;
            testCanvas.imageY = y;
            testCanvas.imageWidth = targetWidth;
            testCanvas.imageHeight = targetHeight;
            testCanvas.clickZoneHeight = testCanvas.imageHeight - 350;

             ctx.drawImage(image, x, y, targetWidth, targetHeight);
        };
    }

    function nextImage() {
        if (level > levelCount) {
            postResults();
            startButton.disabled = false; // Re-enable start button after finishing all levels
            alert("Test complete!"); // Notify user that the test is complete
            return;
        }

        if (currentImageIndex >= currentLevelImages.length) {
            alert("Level complete!");
            updateLevel();
        }

        let imagePath = "/img/raven/" + currentLevelImages[currentImageIndex];
        drawImage(imagePath);
        currentImageIndex++;
    }

    function updateStats() {
        {{#if preset.show_stats}}
            document.getElementById("clicks").innerText = "Кликов: " + totalClicks;
            document.getElementById("misses").innerText = "Промахов: " + totalMisses;

            if (totalClicks > 1) {
                let mean = reactionTimes.reduce((a, b) => a + b) / totalClicks;
                document.getElementById("avgTime").innerText = "Среднее время реакции: " + mean.toFixed(2);

                let deviations = reactionTimes.map(x => Math.pow(x - mean, 2));
                let variance = deviations.reduce((a, b) => a + b) / totalClicks;
                let stdDev = Math.sqrt(variance);
                document.getElementById("stdDev").innerText = "Стандартное отклонение: " + stdDev.toFixed(2);
            }
        {{/if}}
    }

    testCanvas.addEventListener("click", function (event) {
        let currentTime = new Date().getTime();
        if (totalClicks > 0) {
            let reactionTime = currentTime - clickTimes[clickTimes.length - 1]; // Get the time difference between the current and the last click
            reactionTimes.push(reactionTime);
        }
        clickTimes.push(currentTime);

        const rect = testCanvas.getBoundingClientRect();
        const x = event.clientX - rect.left - testCanvas.imageX;
        const y = event.clientY - rect.top - testCanvas.imageY - 350;

        const zoneWidth = testCanvas.imageWidth / 3;
        const zoneHeight = testCanvas.clickZoneHeight / 2;
        const zoneColumn = Math.floor(x / zoneWidth) + 1;
        const zoneRow = Math.floor(y / zoneHeight) + 1;
        const clickedZone = (zoneRow - 1) * 3 + zoneColumn;

        totalClicks++;

        const imageKeys = Object.keys(correctAnswers);
        if (clickedZone === correctAnswers[imageKeys[currentImageIndex - 1]]) {
            // Ill think it over later
        } else {
            totalMisses++;
        }
        nextImage();
        updateStats();
    }, false);

    startButton.addEventListener("click", function() {
        currentImageIndex = 0;
        level = 0;
        totalClicks = 0;
        totalMisses = 0;
        startButton.disabled = true;
        reactionTimes = []; // Clear the reaction times before starting a new test
        clickTimes = []; // Also clear the click times
        updateLevel();
        nextImage();
    });

    function postResults() {
        let avgTime = reactionTimes.reduce((a, b) => a + b, 0) / reactionTimes.length;
        let sd = Math.sqrt(reactionTimes.map(time => Math.pow(time - avgTime, 2)).reduce((a, b) => a + b, 0) / (reactionTimes.length - 1));

        let results = {
            avgTime: avgTime.toFixed(2),
            stdDev: sd.toFixed(2),
            test_id: 5,
            preset_id: {{preset_id}}
        };

        fetch('../', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(results)
        }).then(response => {
            if (response.ok) {
                return response.json();
            } else {
                throw new Error('Error: ' + response.statusText);
            }
        }).then(data => {
            console.log(data);
        }).catch(error => console.error('Error:', error));
    }
</script>