<div class="modal fade" id="descriptionModal" tabindex="-1" role="dialog" aria-labelledby="descriptionModalLabel" >
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="descriptionModalLabel">Средний результат</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Тебе будет предоставлена возможность пройти тест на оценку навыков сложения в уме на основе слуха. Тебе в
течение 2 минут будут подаваться наборы команд, состоящие из длинных и коротких звуковых сигналов. Короткий
звуковой сигнал соответствует числу 1, а длинный — числу 2. Твоя задача — провести сложение этих чисел в уме и
оценить четность полученного значения и после окончания подачи набора звуковых сигналов нужно нажать клавиши
1 или 2, что соответствует нечетному и четному числам. Конкретного сигнала о завершении подачи звукового набора
не будет. Интервал между сигналами одинаковый. Вот пример: звуковой набор, состоящий из одного короткого и двух
длинных сигналов соответствует числу 5, которое не является четным — нужно нажать цифру 1 на клавиатуре.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Закрыть</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="resultsModal" tabindex="-1" role="dialog" aria-labelledby="resultsModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="resultsModalLabel">Средний результат</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Среднее время правильной реакции: <span id="averagePositiveResult"></span> мс</p>
                <p>Стандартное отклонение времени правильной реакции: <span id="stdPositiveResult"></span> мс</p>
                <p>Среднее время неправильной реакции: <span id="averageNegativeResult"></span> мс</p>
                <p>Стандартное отклонение времени неправильной реакции: <span id="stdNegativeResult"></span> мс</p>
            </div>
            <div class="modal-footer">
                <button type="button" id="redirector" class="btn btn-secondary" data-bs-dismiss="modal">Закрыть</button>
            </div>
        </div>
    </div>
</div>

<div class="min-vh-70 d-flex align-items-center">
    <div class="row w-100 justify-content-center">
        <div class="col-12 text-center">
            <button id="startButton" class="btn btn-lg btn-primary" type="button">Начать тест</button>
        </div>
        <div class="text-center mt-5">
            <button id="shortSoundButton" class="btn btn-lg btn-primary" type="button" disabled>Четное</button>
            <button id="longSoundButton" class="btn btn-lg btn-primary ms-3" type="button" disabled>Нечетное</button>
        </div>
    </div>
</div>

<audio id="shortSound" src="/short.mp3" type="audio/mpeg" preload="auto"></audio>
<audio id="longSound" src="/long.mp3" type="audio/mpeg" preload="auto"></audio>

<script>
    const test_id = 4;
    const neededClicks = 30;
    const startButton = document.getElementById('startButton');
    const shortSoundButton = document.getElementById('shortSoundButton');
    const longSoundButton = document.getElementById('longSoundButton');
    const shortSound = document.getElementById('shortSound');
    const longSound = document.getElementById('longSound');

    shortSoundButton.disabled = true;
    longSoundButton.disabled = true;

    let startTime;
    let clickCount = 0;
    let positiveResults = [0];
    let negativeResults = [0];
    let lastPlayedSound;

    $(document).ready(() => {
        const descriptionModal = new bootstrap.Modal(document.getElementById('descriptionModal'));
        descriptionModal.show();
    })

    redirector.addEventListener('click', () => {
        location.href = '../../';
    })

    function playSound(sound) {
        sound.currentTime = 0;
        sound.play();
    }

    startButton.addEventListener('click', () => {
        startButton.disabled = true;
        playRandomSound();
    });

    shortSoundButton.addEventListener('click', () => {
        checkAnswer('short');
    });

    longSoundButton.addEventListener('click', () => {
        checkAnswer('long');
    });

    function checkAnswer(answer) {
        let reactionTime = new Date().getTime() - startTime;
        let correct = (lastPlayedSound === answer) ? 1 : 0;
        if (correct) {
            positiveResults.push(reactionTime);
        } else {
            negativeResults.push(reactionTime);
        }

        shortSoundButton.disabled = true;
        longSoundButton.disabled = true;
        clickCount++;

        if (clickCount === neededClicks) {
            sendResults();
        } else {
            playRandomSound();
        }
    }

    function playShortSoundTwice() {
        shortSound.play();
        setTimeout(() => {
            shortSound.currentTime = 0;
            shortSound.play();
        }, 500);
    }

    function playRandomSound() {
        const randomDelay = Math.floor(Math.random() * 2000) + 1000;

        setTimeout(() => {
            if (Math.random() > 0.5) {
                playShortSoundTwice();
                lastPlayedSound = 'short';
            } else {
                playSound(longSound);
                lastPlayedSound = 'long';
            }
            startTime = new Date().getTime();
            shortSoundButton.disabled = false;
            longSoundButton.disabled = false;
        }, randomDelay);
    }

    function calculateAverage(array) {
        return array.reduce((a, b) => a + b) / Math.max(1, array.length - 1);
    }

    async function sendResults() {
        const averagePositiveResult = calculateAverage(positiveResults)
        const averageNegativeResult = calculateAverage(negativeResults)

        const stdPositiveResult = calculateStandardDeviation(positiveResults)
        const stdNegativeResult = calculateStandardDeviation(negativeResults)

        document.getElementById('averagePositiveResult').textContent = averagePositiveResult.toFixed(2);
        document.getElementById('averageNegativeResult').textContent = averageNegativeResult.toFixed(2);

        document.getElementById('stdPositiveResult').textContent = stdPositiveResult.toFixed(2);
        document.getElementById('stdNegativeResult').textContent = stdNegativeResult.toFixed(2);

        const resultsModal = new bootstrap.Modal(document.getElementById('resultsModal'));
        resultsModal.show();

        const requestOptions = {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ averagePositiveResult, averageNegativeResult, stdPositiveResult, stdNegativeResult, test_id })
        };

        try {
            const response = await fetch('/labs/lab2/', requestOptions);
            console.log('Результаты отправлены:', response);
        } catch (error) {
            console.error('Ошибка при отправке результатов:', error);
        }
</script>