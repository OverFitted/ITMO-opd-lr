<div class="d-flex flex-column min-vh-70">
    <div class="row flex-grow-1 justify-content-center align-items-center">
        <div class="col-auto">
            <button id="startBtn" class="btn btn-primary">Начать тест</button>
            <div id="squareContainer" class="d-none position-relative">
                <div id="square" class="square"></div>
            </div>
            <div id="colorButtons" class="d-none mt-5">
                <div class="col">
                    <button class="btn btn-lg btn-block btn-color" data-color="0" style="background-color: #ff0000;"></button>
                </div>
                <div class="col">
                    <button class="btn btn-lg btn-block btn-color" data-color="1" style="background-color: #00ff00;"></button>
                </div>
                <div class="col">
                    <button class="btn btn-lg btn-block btn-color" data-color="2" style="background-color: #0000ff;"></button>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .square {
        width: 100px;
        height: 100px;
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    }

    .btn-color {
        margin: 5px;
    }
</style>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js" integrity="sha384-E/TSTF3vD3I3cZl7nU8ck6zD7GfimaG6rXMvfqCk8rACbBZ9Xs9ua6KgkfFIzC7T" crossorigin="anonymous"></script>
<script>
    const startBtn = document.getElementById('startBtn');
    const squareContainer = document.getElementById('squareContainer');
    const square = document.getElementById('square');
    const colorButtons = document.getElementById('colorButtons');
    const btnColors = document.querySelectorAll('.btn-color');

    const colors = ['#ff0000', '#00ff00', '#0000ff'];
    let currentColor;
    let results = [];
    let clickCount = 0;

    startBtn.addEventListener('click', () => {
        startBtn.classList.add('d-none');
        squareContainer.classList.remove('d-none');
        colorButtons.classList.remove('d-none');
        showSquare();
    });

    function showSquare() {
        setTimeout(() => {
            currentColor = colors[Math.floor(Math.random() * colors.length)];
            square.style.backgroundColor = currentColor;
        }, Math.random() * 2000 + 500);
    }

    btnColors.forEach((btnColor) => {
        btnColor.addEventListener('click', (event) => {
            const userColor = colors[parseInt(event.target.dataset.color, 10)];
            if (userColor === currentColor) {
                const reactionTime = new Date().getTime() - startTime;
                results.push(reactionTime);
            }
            clickCount++;
            if (clickCount === 30) {
                sendResults();
            } else {
                square.style.backgroundColor = '';
                showSquare();
            }
        });
    });

    function calculateAverage(array) {
        return array.reduce((a, b) => a + b) / array.length;
    }

    async function sendResults() {
        // Здесь отправляется запрос с результатами на сервер
        // ...

        // Расчет среднего значения и отображение результата
        const average = calculateAverage(results);
        console.log('Среднее время реакции:', average.toFixed(2), 'мс');

        // Здесь вы можете показать модальное окно с результатами или другое уведомление
        // ...
    }
</script>