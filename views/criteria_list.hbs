<div class="bloc l-bloc" id="bloc-13">
	<div class="container bloc-lg">
		<div class="row">
			<div class="col text-center">
				<div class="text-lg-center container-div-style">
					<h3 class="mb-4 section-heading primary-text">
						Список критериев
					</h3>
				</div>
			</div>
		</div>
	</div>
</div>

<div class="bloc l-bloc" id="bloc-1">
	<div class="container bloc-lg">
		<div class="row">
			<div class="col">
				{{#each criteria}}
				<div class="row mb-4">
					<div class="col-9">
						<label id="criteria-label-{{this.criteria_id}}" class="form-label text-start">
							{{this.criteria_fields.name_criteria}}
						</label>
					</div>
					<div class="col-2">
						<button onclick="editCriteria({{this.criteria_id}})" class="btn btn-secondary btn-md">Редактировать</button>
					</div>
					<div class="col-1">
						<button onclick="delCriteria({{this.criteria_id}}, this)" class="btn btn-danger btn-md">Удалить</button>
					</div>
				</div>
				{{/each}}
			</div>
			<button type="button" class="btn btn-primary" onclick="modalTextH3.innerHTML = 'Добавить критерий'; modalForm.action = '/user/add-criteria/'" data-bs-toggle="modal" data-bs-target="#criteriaModal">Добавить критерий</button>
		</div>
	</div>
</div>

<div class="bloc l-bloc" id="bloc-2">
	<div class="container bloc-lg">
		<div class="row">
			<div class="col text-start">
				<div class="form-group mb-8">
					<div id="criteriaModal" class="modal modal-xl fade" tabindex="-1" role="dialog">
						<div class="modal-dialog modal-dialog-centered" role="document">
							<div class="modal-content">
								<div class="modal-header">
									<h3 id="modal-text" class="mg-clear primary-text box-heading">
										Добавить критерий
									</h3>
								</div>
								<form method="POST" id="modal-form" action="/user/add-criteria/">
									<div class="modal-body">
										<div class="row">
											<div class="row">
												<div class="row">
													<div class="col form-group mb-3">
														<label class="form-label">Название критерия</label>
														<input id="name_criteria" name="name_criteria" class="form-control" required="">
													</div>
												</div>
												<div class="row">
													<div class="col-4">
														<label class="form-label">Номер лабораторной</label>
														<div class="dropdown">
															<button class="btn btn-secondary dropdown-toggle" type="button" id="labButton" data-bs-toggle="dropdown" aria-expanded="false">
																Выбрать лабораторную
															</button>
															<ul class="dropdown-menu" id="lab-menu" aria-labelledby="labButton">
																<li><a class="dropdown-item" href="#">2</a></li>
																<li><a class="dropdown-item" href="#">3</a></li>
																<li><a class="dropdown-item" href="#">4</a></li>
																<li><a class="dropdown-item" href="#">5</a></li>
															</ul>
														</div>
													</div>

													<div class="col-4">
														<label class="form-label">Номер теста</label>
														<div class="dropdown">
															<button class="btn btn-secondary dropdown-toggle" type="button" id="testButton" data-bs-toggle="dropdown" aria-expanded="false">
																Выбрать тест
															</button>
															<ul class="dropdown-menu" id="test-menu" aria-labelledby="testButton">
															</ul>
														</div>
													</div>

													<div class="col-4">
														<label class="form-label">Пресет теста</label>
														<div class="dropdown">
															<button class="btn btn-secondary dropdown-toggle" type="button" id="presetButton" data-bs-toggle="dropdown" aria-expanded="false">
																Выбрать пресет
															</button>
															<ul class="dropdown-menu" id="preset-menu" aria-labelledby="presetButton">
															</ul>
														</div>
													</div>
												</div>
											</div>

											<input type="hidden" id="labSelection" name="labSelection" value="">
											<input type="hidden" id="testSelection" name="testSelection" value="">
											<input type="hidden" id="presetSelection" name="presetSelection" value="">

											<div class="row" id="params-row" style="--bs-gutter-y: 1rem"></div>
										</div>
									</div>
									<div class="modal-footer">
										<button data-bs-toggle="modal" data-bs-target="#criteriaModal" class="btn btn-d btn-lg primary-btn box-btn fill-mob-btn">Закрыть<br></button>
										<button type="submit" class="btn btn-d btn-lg primary-btn box-btn fill-mob-btn">Сохранить</button>
									</div>
								</form>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

<script>
	let testNum;
	const labDropdownItems = document.querySelectorAll('#lab-menu .dropdown-item');
	const labButton = document.querySelector('#labButton');
	const testButton = document.querySelector('#testButton');
	const presetButton = document.querySelector('#presetButton');
	const labSelection = document.querySelector('#labSelection');
	const testSelection = document.querySelector('#testSelection');
	const presetSelection = document.querySelector('#presetSelection');
	const modalTextH3 = document.querySelector('#modal-text')
	const modalForm = document.querySelector('#modal-form')

	function delCriteria(criteria_id, buttonElement) {
		data = { criteria_id };

		fetch(`/user/del-criteria/`, {
			method: 'post',
			body: JSON.stringify(data),
			headers: {
				'Content-Type': 'application/json'
			},
		})
			.then(response => {
				console.log('Success:', response);
				buttonElement.parentElement.parentElement.remove();
			})
			.catch(error => console.error('Error:', error));
	}

	async function editCriteria(criteria_id) {
		let res = await fetch(`/user/get-criteria/${criteria_id}`, {
			method: 'GET',
			headers: {
				'Content-Type': 'application/json'
			},
		})

		let criteriaData = await res.json();
		console.log(criteriaData)
		let paramsRow = document.querySelector('#params-row');
		let labSelection = document.querySelector('#labSelection');
		let testSelection = document.querySelector('#testSelection');
		let presetSelection = document.querySelector('#presetSelection');
		let nameCriteria = document.querySelector('#name_criteria');

		modalTextH3.innerHTML = 'Изменить критерий';
		modalForm.action = `/user/edit-criteria/${criteria_id}`

		labSelection.value = criteriaData.criteria_fields.lab_num;
		testSelection.value = criteriaData.criteria_fields.test_num;
		presetSelection.value = criteriaData.criteria_fields.preset_num;
		nameCriteria.value = criteriaData.criteria_fields.name_criteria;

		paramsRow.innerHTML = '';
		criteriaData.criteria_fields.params.forEach((param, index) => {
			let newFieldsContainer = document.createElement('div');
			newFieldsContainer.className = 'row';

			let newParamDiv = document.createElement('div');
			newParamDiv.className = 'col-md-3 form-group mb-3';

			let newParamLabel = document.createElement('label');
			newParamLabel.className = 'form-label';
			newParamLabel.innerText = param.param_name;

			let newParamInput = document.createElement('input');
			newParamInput.id = `parameter${index + 1}_criteria`;
			newParamInput.name = `parameter${index + 1}_criteria`;
			newParamInput.className = 'form-control';
			newParamInput.readOnly = true;
			newParamInput.value = param.param_name;

			newParamDiv.appendChild(newParamLabel);
			newParamDiv.appendChild(newParamInput);
			newFieldsContainer.appendChild(newParamDiv);

			let weightDiv = document.createElement('div');
			weightDiv.className = 'col-md-3 form-group mb-3';

			let weightLabel = document.createElement('label');
			weightLabel.className = 'form-label';
			weightLabel.innerText = 'Вес ' + (index + 1);

			let weightInput = document.createElement('input');
			weightInput.id = `weight_param${index + 1}_criteria`;
			weightInput.name = `weight_param${index + 1}_criteria`;
			weightInput.className = 'form-control';
			weightInput.type = 'number';
			weightInput.required = true;
			weightInput.value = param.param_weight;

			weightDiv.appendChild(weightLabel);
			weightDiv.appendChild(weightInput);
			newFieldsContainer.appendChild(weightDiv);

			let directionDiv = document.createElement('div');
			directionDiv.className = 'col-md-3 form-group mb-3';

			let directionLabel = document.createElement('label');
			directionLabel.className = 'form-label';
			directionLabel.innerText = 'Направление ' + (index + 1);

			let directionInputHidden = document.createElement('input');
			directionInputHidden.name = `direction${index + 1}DropdownHidden`;
			directionInputHidden.id = `direction${index + 1}DropdownHidden`;
			directionInputHidden.type = 'hidden';
			directionInputHidden.value = param.param_direction ? "Больше - лучше" : "Меньше - лучше";

			let directionDropdownDiv = document.createElement('div');
			directionDropdownDiv.className = 'dropdown';

			let directionButton = document.createElement('button');
			directionButton.className = 'btn btn-secondary dropdown-toggle';
			directionButton.type = 'button';
			directionButton.id = `direction${index + 1}Dropdown`;
			directionButton.dataset.bsToggle = "dropdown";
			directionButton.setAttribute("aria-expanded", "false");
			directionButton.innerText = param.param_direction ? "Больше - лучше" : "Меньше - лучше";

			let directionUL = document.createElement('ul');
			directionUL.className = 'dropdown-menu';
			directionUL.setAttribute("aria-labelledby", `direction${index + 1}Dropdown`);

			let option1 = document.createElement('li');
			let option1Link = document.createElement('a');
			option1Link.className = 'dropdown-item';
			option1Link.href = '#';
			option1Link.innerText = "Больше - лучше";
			option1.appendChild(option1Link);

			let option2 = document.createElement('li');
			let option2Link = document.createElement('a');
			option2Link.className = 'dropdown-item';
			option2Link.href = '#';
			option2Link.innerText = "Меньше - лучше";
			option2.appendChild(option2Link);

			directionUL.appendChild(option1);
			directionUL.appendChild(option2);

			directionDropdownDiv.appendChild(directionButton);
			directionDropdownDiv.appendChild(directionUL);

			directionDiv.appendChild(directionLabel);
			directionDiv.appendChild(directionInputHidden);
			directionDiv.appendChild(directionDropdownDiv);
			newFieldsContainer.appendChild(directionDiv);

			let sliceDiv = document.createElement('div');
			sliceDiv.className = 'col-md-3 form-group mb-3';

			let sliceLabel = document.createElement('label');
			sliceLabel.className = 'form-label';
			sliceLabel.innerText = 'Срез ' + (index + 1);

			let sliceInput = document.createElement('input');
			sliceInput.id = `slice_param${index + 1}_criteria`;
			sliceInput.name = `slice_param${index + 1}_criteria`;
			sliceInput.className = 'form-control';
			sliceInput.type = 'range';
			sliceInput.value = param.param_slice;
			sliceInput.min = param.slice_range[0];
			sliceInput.max = param.slice_range[1];
			sliceInput.step = 0.1;
			sliceInput.required = true;
			sliceInput.oninput = `slice${index + 1}Output.value = this.value`

			let sliceOutput = document.createElement('output');
			sliceOutput.id = `slice${index + 1}_criteria`
			sliceOutput.value = param.param_slice;

			sliceDiv.appendChild(sliceLabel);
			sliceDiv.appendChild(sliceInput);
			sliceDiv.appendChild(sliceOutput);
			newFieldsContainer.appendChild(sliceDiv);

			paramsRow.appendChild(newFieldsContainer);
		});

		const myModal = new bootstrap.Modal(document.getElementById('criteriaModal'));
		myModal.show();
	}

	labDropdownItems.forEach(item => {
		item.addEventListener('click', event => {
			event.preventDefault();
			let selection = event.target.textContent;
			labButton.textContent = selection;
			labSelection.value = selection;
		});
	});

	document.querySelectorAll('#lab-menu a').forEach(item => {
		item.addEventListener('click', function (event) {
			event.preventDefault();

			const selectedOption = this.innerText;
			let testDropdownMenu = document.querySelector('#testButton ~ .dropdown-menu');
			let presetDropdownMenu = document.querySelector('#presetButton ~ .dropdown-menu');

			testNum = selectedOption;

			testDropdownMenu.innerHTML = '';
			presetDropdownMenu.innerHTML = '';

			testButton.innerHTML = 'Выбрать тест';
			presetButton.innerHTML = 'Выбрать пресет';

			let paramsRow = document.querySelector('#params-row');
			paramsRow.innerHTML = '';

			fetch(`/user/choose-criteria/${selectedOption}`, {
				method: 'GET',
				headers: {
					'Content-Type': 'application/json'
				},
			}).then(response => response.json())
				.then(labConfigData => {
					labConfigData.tests.forEach(option => {
						let test_num = option.test_num;
						let newOption = document.createElement('li');
						newOption.innerHTML = `<a class="dropdown-item" href="#">${test_num}</a>`;
						testDropdownMenu.appendChild(newOption);
					});

					const testDropdownItems = document.querySelectorAll('#test-menu .dropdown-item');

					testDropdownItems.forEach(item => {
						item.addEventListener('click', event => {
							event.preventDefault();
							let selection = event.target.textContent;
							testButton.textContent = selection;
							testSelection.value = selection;
						});
					});

					document.querySelectorAll('#test-menu a').forEach(item => {
						item.addEventListener('click', function (event) {
							event.preventDefault();

							const selectedOption = this.innerText;
							paramsRow.innerHTML = '';

							fetch(`/user/choose-criteria/${testNum}/${selectedOption}`, {
								method: 'GET',
								headers: {
									'Content-Type': 'application/json'
								},
							}).then(response => response.json())
								.then(testConfigData => {
									let presetDropdownMenu = document.querySelector('#presetButton ~ .dropdown-menu');
									presetDropdownMenu.innerHTML = '';
									testConfigData.presets.forEach((preset, index) => {
										let preset_name = preset.preset_name;
										let newOption = document.createElement('li');
										newOption.innerHTML = `<a class="dropdown-item" href="#">${preset_name}</a>`;
										presetDropdownMenu.appendChild(newOption);
									})

									const presetDropdownItems = document.querySelectorAll('#preset-menu .dropdown-item');
									presetDropdownItems.forEach(item => {
										item.addEventListener('click', event => {
											event.preventDefault();
											let selection = event.target.textContent;
											presetButton.textContent = selection;
											presetSelection.value = selection;
										});
									});

									testConfigData.params.forEach((param, index) => {
										let newFieldsContainer = document.createElement('div');
										newFieldsContainer.className = 'row';

										let newParamLabelDiv = document.createElement('div');
										newParamLabelDiv.className = 'col-md-3 form-group mb-3';

										let newParamLabel = document.createElement('label');
										newParamLabel.className = 'form-label';
										newParamLabel.innerText = param.param_name;

										let newParamInput = document.createElement('input');
										newParamInput.id = `parameter${index + 1}_criteria`;
										newParamInput.name = `parameter${index + 1}_criteria`;
										newParamInput.className = 'form-control';
										newParamInput.readOnly = true;
										newParamInput.value = param.param_name;

										newParamLabelDiv.appendChild(newParamLabel);
										newParamLabelDiv.appendChild(newParamInput);
										newFieldsContainer.appendChild(newParamLabelDiv);

										let weightDiv = document.createElement('div');
										weightDiv.className = 'col-md-3 form-group mb-3';
										weightDiv.innerHTML = `
                                            <label class="form-label">Вес ${index + 1}</label>
                                            <input id="weight_param${index + 1}_criteria" name="weight_param${index + 1}_criteria" class="form-control" type="number" required="">`;
										newFieldsContainer.appendChild(weightDiv);

										let directionDropdownId = `direction${index + 1}Dropdown`;
										let directionHiddenInputId = `${directionDropdownId}Hidden`;

										let directionDiv = document.createElement('div');
										directionDiv.className = 'col-md-3 form-group mb-3';
										directionDiv.innerHTML = `
											<label class="form-label">Направление ${index + 1}</label>
											<input name="${directionHiddenInputId}" id="${directionHiddenInputId}" type="hidden" value="">
											<div class="dropdown">
												<button class="btn btn-secondary dropdown-toggle" type="button" id="${directionDropdownId}" data-bs-toggle="dropdown" aria-expanded="false">
													Выбрать направление
												</button>
												<ul class="dropdown-menu" aria-labelledby="${directionDropdownId}">
													<li><a class="dropdown-item" href="#">Больше - лучше</a></li>
													<li><a class="dropdown-item" href="#">Меньше - лучше</a></li>
												</ul>
											</div>`;
										newFieldsContainer.appendChild(directionDiv);

										let directionDropdownButton = directionDiv.querySelector(`#${directionDropdownId}`);
										let directionHiddenInput = directionDiv.querySelector(`#${directionHiddenInputId}`);

										directionDiv.querySelectorAll('.dropdown-item').forEach(item => {
											item.addEventListener('click', function (event) {
												event.preventDefault();

												let selectedOption = this.innerText;
												directionDropdownButton.innerText = selectedOption;
												directionHiddenInput.value = selectedOption;
											});
										});

										let sliceDiv = document.createElement('div');
										sliceDiv.className = 'col-md-3 form-group mb-3';
										sliceDiv.innerHTML = `
											<label class="form-label">Срез ${index + 1}</label>
											<input id="slice${index + 1}_criteria" name="slice${index + 1}_criteria" class="form-control" type="range" min="${param.slice_range[0]}" max="${param.slice_range[1]}" value="${param.slice_range[0]}" step="0.1" oninput="slice${index + 1}Output.value = this.value" required="">
											<output id="slice${index + 1}Output">${param.slice_range[0]}</output>`;
										newFieldsContainer.appendChild(sliceDiv);

										paramsRow.appendChild(newFieldsContainer);
									});
								})
								.catch(error => console.error('Error:', error));
						});
					});
				})
				.catch(error => console.error('Error:', error));
		})
	});
</script>